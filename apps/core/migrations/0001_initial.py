# Generated by Django 4.2.10 on 2025-04-24 16:03

from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='BusinessHours',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], unique=True, verbose_name='Day of week')),
                ('is_open', models.BooleanField(default=True, verbose_name='Is open')),
                ('opening_time', models.TimeField(default='09:00', verbose_name='Opening time')),
                ('closing_time', models.TimeField(default='18:00', verbose_name='Closing time')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Business Hours',
                'verbose_name_plural': 'Business Hours',
                'ordering': ['day_of_week'],
            },
        ),
        migrations.CreateModel(
            name='BusinessSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(default='Barberian', max_length=100, verbose_name='Business name')),
                ('address', models.TextField(blank=True, null=True, verbose_name='Address')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone')),
                ('email', models.EmailField(blank=True, max_length=254, null=True, verbose_name='Email')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='business/', verbose_name='Logo')),
                ('about', models.TextField(blank=True, null=True, verbose_name='About')),
                ('facebook_url', models.URLField(blank=True, null=True, verbose_name='Facebook URL')),
                ('instagram_url', models.URLField(blank=True, null=True, verbose_name='Instagram URL')),
                ('twitter_url', models.URLField(blank=True, null=True, verbose_name='Twitter URL')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Business Settings',
                'verbose_name_plural': 'Business Settings',
            },
        ),
        migrations.CreateModel(
            name='Holiday',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Name')),
                ('date', models.DateField(verbose_name='Date')),
                ('is_recurring', models.BooleanField(default=False, help_text='Recurring annually', verbose_name='Is recurring')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated at')),
            ],
            options={
                'verbose_name': 'Holiday',
                'verbose_name_plural': 'Holidays',
                'ordering': ['date'],
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='Email address')),
                ('first_name', models.CharField(max_length=150, verbose_name='First name')),
                ('last_name', models.CharField(max_length=150, verbose_name='Last name')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True, verbose_name='Phone number')),
                ('role', models.CharField(choices=[('admin', 'Admin'), ('staff', 'Staff'), ('client', 'Client')], default='client', max_length=10, verbose_name='Role')),
                ('bio', models.TextField(blank=True, null=True, verbose_name='Bio')),
                ('profile_image', models.ImageField(blank=True, null=True, upload_to='profiles/', verbose_name='Profile image')),
                ('specialization', models.CharField(blank=True, max_length=100, null=True, verbose_name='Specialization')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
            },
        ),
    ]
